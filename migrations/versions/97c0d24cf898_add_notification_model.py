"""add notification model

Revision ID: 97c0d24cf898
Revises: 08f4ddbe0bde
Create Date: 2025-07-18 19:10:42.161366

"""

from typing import Sequence, Union

from alembic import op
import sqlalchemy as sa
import core
from sqlalchemy.dialects import postgresql

# revision identifiers, used by Alembic.
revision: str = "97c0d24cf898"
down_revision: Union[str, Sequence[str], None] = "08f4ddbe0bde"
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    """Upgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table(
        "notifications",
        sa.Column("id", sa.UUID(), nullable=False),
        sa.Column("user_id", sa.UUID(), nullable=False),
        sa.Column("title", sa.String(length=255), nullable=True),
        sa.Column("body", sa.String(), nullable=True),
        sa.Column(
            "data",
            postgresql.JSONB(astext_type=sa.Text()),
            nullable=True,
            comment="Generic data payload for the notification",
        ),
        sa.Column(
            "image",
            core.storage.sqlalchemy.fields.imagefield.ImageField(),
            nullable=True,
        ),
        sa.Column("notification_type", sa.String(length=20), nullable=False),
        sa.Column(
            "redirection_target",
            sa.String(length=500),
            nullable=True,
            comment="URL or identifier for redirection on click",
        ),
        sa.Column("status", sa.String(length=20), nullable=False),
        sa.Column("is_deleted", sa.Boolean(), nullable=False),
        sa.Column(
            "deleted_at", core.db.fields.TZAwareDateTime(timezone=True), nullable=True
        ),
        sa.Column(
            "created_at", core.db.fields.TZAwareDateTime(timezone=True), nullable=False
        ),
        sa.Column(
            "updated_at", core.db.fields.TZAwareDateTime(timezone=True), nullable=False
        ),
        sa.ForeignKeyConstraint(
            ["user_id"],
            ["users.id"],
        ),
        sa.PrimaryKeyConstraint("id"),
    )
    op.create_index(
        op.f("ix_notifications_is_deleted"),
        "notifications",
        ["is_deleted"],
        unique=False,
    )
    op.create_index(
        op.f("ix_notifications_notification_type"),
        "notifications",
        ["notification_type"],
        unique=False,
    )
    op.create_index(
        op.f("ix_notifications_status"), "notifications", ["status"], unique=False
    )
    op.create_index(
        op.f("ix_notifications_user_id"), "notifications", ["user_id"], unique=False
    )
    op.create_table(
        "notification_channels",
        sa.Column("id", sa.UUID(), nullable=False),
        sa.Column("notification_id", sa.UUID(), nullable=False),
        sa.Column(
            "device_id",
            sa.UUID(),
            nullable=True,
            comment="Optional: For device-specific channels like FCM Push",
        ),
        sa.Column("channel_type", sa.String(length=20), nullable=False),
        sa.Column(
            "channel_specific_data",
            postgresql.JSONB(astext_type=sa.Text()),
            nullable=True,
            comment="JSON payload for channel-specific details (e.g., FCM message ID, error codes)",
        ),
        sa.Column("status", sa.String(length=20), nullable=False),
        sa.Column(
            "sent_at", core.db.fields.TZAwareDateTime(timezone=True), nullable=False
        ),
        sa.Column(
            "delivered_at", core.db.fields.TZAwareDateTime(timezone=True), nullable=True
        ),
        sa.Column(
            "seen_at", core.db.fields.TZAwareDateTime(timezone=True), nullable=True
        ),
        sa.Column("error_message", sa.String(), nullable=True),
        sa.Column("is_deleted", sa.Boolean(), nullable=False),
        sa.Column(
            "deleted_at", core.db.fields.TZAwareDateTime(timezone=True), nullable=True
        ),
        sa.Column(
            "created_at", core.db.fields.TZAwareDateTime(timezone=True), nullable=False
        ),
        sa.Column(
            "updated_at", core.db.fields.TZAwareDateTime(timezone=True), nullable=False
        ),
        sa.ForeignKeyConstraint(
            ["device_id"],
            ["devices.id"],
        ),
        sa.ForeignKeyConstraint(
            ["notification_id"],
            ["notifications.id"],
        ),
        sa.PrimaryKeyConstraint("id"),
    )
    op.create_index(
        op.f("ix_notification_channels_channel_type"),
        "notification_channels",
        ["channel_type"],
        unique=False,
    )
    op.create_index(
        op.f("ix_notification_channels_device_id"),
        "notification_channels",
        ["device_id"],
        unique=False,
    )
    op.create_index(
        op.f("ix_notification_channels_is_deleted"),
        "notification_channels",
        ["is_deleted"],
        unique=False,
    )
    op.create_index(
        op.f("ix_notification_channels_notification_id"),
        "notification_channels",
        ["notification_id"],
        unique=False,
    )
    op.create_index(
        op.f("ix_notification_channels_status"),
        "notification_channels",
        ["status"],
        unique=False,
    )
    # ### end Alembic commands ###


def downgrade() -> None:
    """Downgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_index(
        op.f("ix_notification_channels_status"), table_name="notification_channels"
    )
    op.drop_index(
        op.f("ix_notification_channels_notification_id"),
        table_name="notification_channels",
    )
    op.drop_index(
        op.f("ix_notification_channels_is_deleted"), table_name="notification_channels"
    )
    op.drop_index(
        op.f("ix_notification_channels_device_id"), table_name="notification_channels"
    )
    op.drop_index(
        op.f("ix_notification_channels_channel_type"),
        table_name="notification_channels",
    )
    op.drop_table("notification_channels")
    op.drop_index(op.f("ix_notifications_user_id"), table_name="notifications")
    op.drop_index(op.f("ix_notifications_status"), table_name="notifications")
    op.drop_index(
        op.f("ix_notifications_notification_type"), table_name="notifications"
    )
    op.drop_index(op.f("ix_notifications_is_deleted"), table_name="notifications")
    op.drop_table("notifications")
    # ### end Alembic commands ###
