"""init db schema

Revision ID: 41ff89d031d9
Revises: 52879fd9a8dc
Create Date: 2025-07-06 17:20:15.201839

"""

from typing import Sequence, Union

from alembic import op
import sqlalchemy as sa
from avcfastapi.core.database.sqlalchamey import core
from sqlalchemy.dialects import postgresql

# revision identifiers, used by Alembic.
revision: str = "41ff89d031d9"
down_revision: Union[str, Sequence[str], None] = "52879fd9a8dc"
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    """Upgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table(
        "users",
        sa.Column(
            "id", sa.UUID(), server_default=sa.text("gen_random_uuid()"), nullable=False
        ),
        sa.Column("uid", sa.String(length=128), nullable=False),
        sa.Column("fullname", sa.String(length=120), nullable=False),
        sa.Column("email", sa.String(length=120), nullable=True),
        sa.Column("email_verified", sa.Boolean(), nullable=True),
        sa.Column("phone_number", sa.String(length=120), nullable=True),
        sa.Column(
            "profile_picture",
            core.storage.sqlalchemy.fields.imagefield.ImageField(),
            nullable=True,
        ),
        sa.Column("company_name", sa.String(length=100), nullable=True),
        sa.Column("privacy_preference", sa.String(length=20), nullable=False),
        sa.Column("is_deleted", sa.Boolean(), nullable=False),
        sa.Column(
            "deleted_at", core.db.fields.TZAwareDateTime(timezone=True), nullable=True
        ),
        sa.Column(
            "created_at", core.db.fields.TZAwareDateTime(timezone=True), nullable=False
        ),
        sa.Column(
            "updated_at", core.db.fields.TZAwareDateTime(timezone=True), nullable=False
        ),
        sa.PrimaryKeyConstraint("id"),
        sa.UniqueConstraint("uid"),
    )
    op.create_index(op.f("ix_users_is_deleted"), "users", ["is_deleted"], unique=False)
    op.create_table(
        "vehicles",
        sa.Column(
            "id", sa.UUID(), server_default=sa.text("gen_random_uuid()"), nullable=False
        ),
        sa.Column("vehicle_number", sa.String(length=20), nullable=False),
        sa.Column("name", sa.String(length=100), nullable=True),
        sa.Column("vehicle_type", sa.String(length=30), nullable=True),
        sa.Column("brand", sa.String(length=50), nullable=True),
        sa.Column("user_id", sa.UUID(), nullable=False),
        sa.Column(
            "image",
            core.storage.sqlalchemy.fields.imagefield.ImageField(),
            nullable=True,
        ),
        sa.Column("is_verified", sa.Boolean(), nullable=True),
        sa.Column("is_deleted", sa.Boolean(), nullable=False),
        sa.Column(
            "deleted_at", core.db.fields.TZAwareDateTime(timezone=True), nullable=True
        ),
        sa.Column(
            "created_at", core.db.fields.TZAwareDateTime(timezone=True), nullable=False
        ),
        sa.Column(
            "updated_at", core.db.fields.TZAwareDateTime(timezone=True), nullable=False
        ),
        sa.ForeignKeyConstraint(
            ["user_id"],
            ["users.id"],
        ),
        sa.PrimaryKeyConstraint("id"),
        sa.UniqueConstraint("vehicle_number"),
    )
    op.create_index(
        op.f("ix_vehicles_is_deleted"), "vehicles", ["is_deleted"], unique=False
    )
    op.create_table(
        "vehicle_reports",
        sa.Column(
            "id", sa.UUID(), server_default=sa.text("gen_random_uuid()"), nullable=False
        ),
        sa.Column(
            "report_number",
            sa.Integer(),
            server_default=sa.text("nextval('report_number_seq')"),
            nullable=False,
        ),
        sa.Column("vehicle_id", sa.UUID(), nullable=False),
        sa.Column("user_id", sa.UUID(), nullable=False),
        sa.Column("notes", sa.Text(), nullable=True),
        sa.Column("current_status", sa.String(length=50), nullable=False),
        sa.Column("is_deleted", sa.Boolean(), nullable=False),
        sa.Column(
            "deleted_at", core.db.fields.TZAwareDateTime(timezone=True), nullable=True
        ),
        sa.Column(
            "created_at", core.db.fields.TZAwareDateTime(timezone=True), nullable=False
        ),
        sa.Column(
            "updated_at", core.db.fields.TZAwareDateTime(timezone=True), nullable=False
        ),
        sa.ForeignKeyConstraint(
            ["user_id"],
            ["users.id"],
        ),
        sa.ForeignKeyConstraint(
            ["vehicle_id"],
            ["vehicles.id"],
        ),
        sa.PrimaryKeyConstraint("id", "report_number"),
        sa.UniqueConstraint("id"),
        sa.UniqueConstraint("report_number"),
    )
    op.create_index(
        op.f("ix_vehicle_reports_is_deleted"),
        "vehicle_reports",
        ["is_deleted"],
        unique=False,
    )
    op.create_table(
        "chat_messages",
        sa.Column(
            "id", sa.UUID(), server_default=sa.text("gen_random_uuid()"), nullable=False
        ),
        sa.Column("report_id", sa.UUID(), nullable=False),
        sa.Column("user_id", sa.UUID(), nullable=False),
        sa.Column("content", sa.Text(), nullable=False),
        sa.Column("replay_to_message_id", sa.UUID(), nullable=True),
        sa.Column("is_deleted", sa.Boolean(), nullable=False),
        sa.Column(
            "deleted_at", core.db.fields.TZAwareDateTime(timezone=True), nullable=True
        ),
        sa.Column(
            "created_at", core.db.fields.TZAwareDateTime(timezone=True), nullable=False
        ),
        sa.Column(
            "updated_at", core.db.fields.TZAwareDateTime(timezone=True), nullable=False
        ),
        sa.ForeignKeyConstraint(
            ["replay_to_message_id"],
            ["chat_messages.id"],
        ),
        sa.ForeignKeyConstraint(
            ["report_id"],
            ["vehicle_reports.id"],
        ),
        sa.ForeignKeyConstraint(
            ["user_id"],
            ["users.id"],
        ),
        sa.PrimaryKeyConstraint("id"),
    )
    op.create_index(
        op.f("ix_chat_messages_is_deleted"),
        "chat_messages",
        ["is_deleted"],
        unique=False,
    )
    op.create_table(
        "vehicle_report_images",
        sa.Column(
            "id", sa.UUID(), server_default=sa.text("gen_random_uuid()"), nullable=False
        ),
        sa.Column("report_id", sa.UUID(), nullable=False),
        sa.Column(
            "image",
            core.storage.sqlalchemy.fields.imagefield.ImageField(),
            nullable=True,
        ),
        sa.Column("is_deleted", sa.Boolean(), nullable=False),
        sa.Column(
            "deleted_at", core.db.fields.TZAwareDateTime(timezone=True), nullable=True
        ),
        sa.Column(
            "created_at", core.db.fields.TZAwareDateTime(timezone=True), nullable=False
        ),
        sa.Column(
            "updated_at", core.db.fields.TZAwareDateTime(timezone=True), nullable=False
        ),
        sa.ForeignKeyConstraint(
            ["report_id"],
            ["vehicle_reports.id"],
        ),
        sa.PrimaryKeyConstraint("id"),
    )
    op.create_index(
        op.f("ix_vehicle_report_images_is_deleted"),
        "vehicle_report_images",
        ["is_deleted"],
        unique=False,
    )
    op.create_table(
        "vehicle_report_status_logs",
        sa.Column(
            "id", sa.UUID(), server_default=sa.text("gen_random_uuid()"), nullable=False
        ),
        sa.Column("report_id", sa.UUID(), nullable=False),
        sa.Column("user_id", sa.UUID(), nullable=False),
        sa.Column("data", postgresql.JSONB(astext_type=sa.Text()), nullable=True),
        sa.Column("status", sa.String(length=50), nullable=False),
        sa.Column("notes", sa.String(length=255), nullable=True),
        sa.Column(
            "created_at", core.db.fields.TZAwareDateTime(timezone=True), nullable=False
        ),
        sa.Column(
            "updated_at", core.db.fields.TZAwareDateTime(timezone=True), nullable=False
        ),
        sa.ForeignKeyConstraint(
            ["report_id"],
            ["vehicle_reports.id"],
        ),
        sa.ForeignKeyConstraint(
            ["user_id"],
            ["users.id"],
        ),
        sa.PrimaryKeyConstraint("id"),
    )
    op.create_table(
        "chat_message_attachments",
        sa.Column(
            "id", sa.UUID(), server_default=sa.text("gen_random_uuid()"), nullable=False
        ),
        sa.Column("message_id", sa.UUID(), nullable=False),
        sa.Column("attachment_type", sa.String(length=50), nullable=False),
        sa.Column(
            "file", core.storage.sqlalchemy.fields.filefield.FileField(), nullable=True
        ),
        sa.Column("is_deleted", sa.Boolean(), nullable=False),
        sa.Column(
            "deleted_at", core.db.fields.TZAwareDateTime(timezone=True), nullable=True
        ),
        sa.Column(
            "created_at", core.db.fields.TZAwareDateTime(timezone=True), nullable=False
        ),
        sa.Column(
            "updated_at", core.db.fields.TZAwareDateTime(timezone=True), nullable=False
        ),
        sa.ForeignKeyConstraint(
            ["message_id"],
            ["chat_messages.id"],
        ),
        sa.PrimaryKeyConstraint("id"),
    )
    op.create_index(
        op.f("ix_chat_message_attachments_is_deleted"),
        "chat_message_attachments",
        ["is_deleted"],
        unique=False,
    )
    # ### end Alembic commands ###


def downgrade() -> None:
    """Downgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_index(
        op.f("ix_chat_message_attachments_is_deleted"),
        table_name="chat_message_attachments",
    )
    op.drop_table("chat_message_attachments")
    op.drop_table("vehicle_report_status_logs")
    op.drop_index(
        op.f("ix_vehicle_report_images_is_deleted"), table_name="vehicle_report_images"
    )
    op.drop_table("vehicle_report_images")
    op.drop_index(op.f("ix_chat_messages_is_deleted"), table_name="chat_messages")
    op.drop_table("chat_messages")
    op.drop_index(op.f("ix_vehicle_reports_is_deleted"), table_name="vehicle_reports")
    op.drop_table("vehicle_reports")
    op.drop_index(op.f("ix_vehicles_is_deleted"), table_name="vehicles")
    op.drop_table("vehicles")
    op.drop_index(op.f("ix_users_is_deleted"), table_name="users")
    op.drop_table("users")
    # ### end Alembic commands ###
